// Generated by CoffeeScript 2.5.1
(function() {
  // * Copyright (C) 2013 [Jeff Mesnil](http://jmesnil.net/)

  // The library can be used in node.js app to connect to STOMP brokers over TCP
  // or Web sockets.
  /*
     Stomp Over WebSocket http://www.jmesnil.net/stomp-websocket/doc/ | Apache License V2.0

     Copyright (C) 2013 [Jeff Mesnil](http://jmesnil.net/)
  */
  var Stomp, net, overTCP, overWS, wrapTCP, wrapWS;

  Stomp = require('./stomp');

  net = require('net');

  // in node.js apps, `setInterval` and `clearInterval` methods used to handle
  // hear-beats are implemented using node.js Timers
  Stomp.Stomp.setInterval = function(interval, f) {
    return setInterval(f, interval);
  };

  Stomp.Stomp.clearInterval = function(id) {
    return clearInterval(id);
  };

  // wrap a TCP socket (provided by node.js's net module) in a "Web Socket"-like
  // object
  wrapTCP = function(port, host) {
    var socket, ws;
    // the raw TCP socket
    socket = null;
    // the "Web Socket"-like object expected by stomp.js
    ws = {
      url: 'tcp:// ' + host + ':' + port,
      send: function(d) {
        return socket.write(d);
      },
      close: function() {
        return socket.end();
      }
    };
    socket = net.connect(port, host, function(e) {
      return ws.onopen();
    });
    socket.on('error', function(e) {
      return typeof ws.onclose === "function" ? ws.onclose(e) : void 0;
    });
    socket.on('close', function(e) {
      return typeof ws.onclose === "function" ? ws.onclose(e) : void 0;
    });
    socket.on('data', function(data) {
      var event;
      event = {
        'data': data.toString()
      };
      return ws.onmessage(event);
    });
    return ws;
  };

  // wrap a Web Socket connection (provided by the websocket npm module) in a "Web
  // Socket"-like object
  wrapWS = function(url) {
    var WebSocketClient, connection, socket, ws;
    WebSocketClient = require('websocket').client;
    // the underlying connection that will be wrapped
    connection = null;
    // the "Web Socket"-like object expected by stomp.js
    ws = {
      url: url,
      send: function(d) {
        return connection.sendUTF(d);
      },
      close: function() {
        return connection.close();
      }
    };
    socket = new WebSocketClient();
    socket.on('connect', function(conn) {
      connection = conn;
      ws.onopen();
      connection.on('error', function(error) {
        return typeof ws.onclose === "function" ? ws.onclose(error) : void 0;
      });
      connection.on('close', function() {
        return typeof ws.onclose === "function" ? ws.onclose() : void 0;
      });
      return connection.on('message', function(message) {
        var event;
        if (message.type === 'utf8') {
          event = {
            'data': message.utf8Data
          };
          return ws.onmessage(event);
        }
      });
    });
    socket.connect(url);
    return ws;
  };

  // This method can be used by node.js app to connect to a STOMP broker over a
  // TCP socket
  overTCP = function(host, port) {
    var socket;
    socket = wrapTCP(port, host);
    return Stomp.Stomp.over(socket);
  };

  // This method can be used by node.js app to connect to a STOMP broker over a
  // Web socket
  overWS = function(url) {
    var socket;
    socket = wrapWS(url);
    return Stomp.Stomp.over(socket);
  };

  exports.overTCP = overTCP;

  exports.overWS = overWS;

}).call(this);
